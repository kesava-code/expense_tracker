// Mocks generated by Mockito 5.4.5 from annotations
// in expenses_client/test/expenses_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:expenses_client/expenses_client.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i2.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.ExpenseCategory>> getExpenses({
    DateTime? startDate,
    DateTime? endDate,
    List<int>? categoryIds,
    double? minAmount,
    double? maxAmount,
    String? sortBy,
    String? sortOrder,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenses, [], {
              #startDate: startDate,
              #endDate: endDate,
              #categoryIds: categoryIds,
              #minAmount: minAmount,
              #maxAmount: maxAmount,
              #sortBy: sortBy,
              #sortOrder: sortOrder,
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i3.Future<List<_i2.ExpenseCategory>>.value(
              <_i2.ExpenseCategory>[],
            ),
          )
          as _i3.Future<List<_i2.ExpenseCategory>>);

  @override
  _i3.Future<int?> addExpense(_i2.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [expense]),
            returnValue: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);

  @override
  _i3.Future<int> updateExpense(_i2.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> deleteExpense(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<double> getExpensesSum({
    DateTime? startDate,
    DateTime? endDate,
    List<int>? categoryIds,
    double? minAmount,
    double? maxAmount,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExpensesSum, [], {
              #startDate: startDate,
              #endDate: endDate,
              #categoryIds: categoryIds,
              #minAmount: minAmount,
              #maxAmount: maxAmount,
            }),
            returnValue: _i3.Future<double>.value(0.0),
          )
          as _i3.Future<double>);
}
